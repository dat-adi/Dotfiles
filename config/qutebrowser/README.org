#+TITLE: QuteBrowser Configuration
#+DESCRIPTION: A Literate Programming Configuration for QuteBrowser
#+PROPERTY: header-args :tangle config.py

* About This Configuration
This is a literate programming configuration for the QuteBrowser that I've set up on my system.
- https://qutebrowser.org/

Here, you will find the configuration for my version of the QuteBrowser with plugins, and browser integrations.

* Auto Configuration
Change the argument to True to still load settings configured via autoconfig.yml.
We generally need this to be at =False=, if we wish to configure QuteBrowser through the configuration file rather than the autoconfig file.

#+BEGIN_SRC python
config.load_autoconfig(False)
#+END_SRC

** Configuration Pages for QuteBrowser
These are the official links to the QuteBrowser pages for configuration.
It's a bit more interactive than the general =config.py= file.

- [[qute://help/configuring.html]]
- [[qute://help/settings.html]]

* Tab Bar Configuration
This is where you define how the tab bar behaves in qutebrowser.
There are a few options that you can use,
- always: Always show the tab bar.
- never: Always hide the tab bar.
- multiple: Hide the tab bar if only one tab is open.
- switching: Show the tab bar when switching tabs.

#+BEGIN_SRC python
c.tabs.show = "switching"
#+END_SRC

* Default Pages
This is where you can set up the default pages that you trigger when you open the browser or create a new tab.
Generally, you receive a blank screen, but, once set up, you can greet yourself with a custom homepage.

I've configured it with my home page I've derived from the [[github:b-coimbra/dawn][Dawn]] webpages.

#+BEGIN_SRC python
# Setting the default page
c.url.default_page = "file:///home/dat-adi/dotfiles/browser/src/dawnpage.html"

# Putting up the start page
c.url.start_pages = ["file:///home/dat-adi/dotfiles/browser/src/dawnpage.html"]
#+END_SRC

* Search Engines
Here lie the various search engines that I use for navigating through the internet.
I generally use duckduckgo, simply because I kinda got tired of Google, so, here's mine.

I've also added =aw= and =gh= to the search engine list, as, I do use them pretty frequently.
It's a good idea to make one for yourself, in the case that you search a website regularly.

#+BEGIN_SRC python
c.url.searchengines = {
    "DEFAULT": "https://duckduckgo.com/?q={}",
    "am": "https://www.amazon.in/s?k={}",
    "aw": "https://wiki.archlinux.org/?search={}",
    "goog": "https://www.google.com/search?q={}",
    "re": "https://www.reddit.com/r/{}",
    "gh": "https://www.github.com/search?q={}",
    "wiki": "https://en.wikipedia.org/wiki/{}",
    "yt": "https://www.youtube.com/results?search_query={}",
}
#+END_SRC

* Theming
Here is the theming for the colors of the web browser.

The theme that I currently use follows the one created by [[https://gitlab.com/dwt1][DistroTube]].
It's pretty good, and I do recommend that people try it out and modify it to your liking.
I'm pretty satisfied with the look for now.

#+BEGIN_SRC python
# Setting Dark Mode on
# config.set("colors.webpage.darkmode.enabled", True)

# Text color of the completion widget. May be a single color to use for
# all columns or a list of three colors, one for each column.
# Type: List of QtColor, or QtColor
c.colors.completion.fg = ["#9cc4ff", "white", "white"]

# Background color of the completion widget for odd rows.
# Type: QssColor
c.colors.completion.odd.bg = "#1c1f24"

# Background color of the completion widget for even rows.
# Type: QssColor
c.colors.completion.even.bg = "#232429"

# Foreground color of completion widget category headers.
# Type: QtColor
c.colors.completion.category.fg = "#e1acff"

# Background color of the completion widget category headers.
# Type: QssColor
c.colors.completion.category.bg = (
    "qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #000000, stop:1 #232429)"
)

# Top border color of the completion widget category headers.
# Type: QssColor
c.colors.completion.category.border.top = "#3f4147"

# Bottom border color of the completion widget category headers.
# Type: QssColor
c.colors.completion.category.border.bottom = "#3f4147"

# Foreground color of the selected completion item.
# Type: QtColor
c.colors.completion.item.selected.fg = "#282c34"

# Background color of the selected completion item.
# Type: QssColor
c.colors.completion.item.selected.bg = "#ecbe7b"

# Foreground color of the matched text in the selected completion item.
# Type: QtColor
c.colors.completion.item.selected.match.fg = "#c678dd"

# Foreground color of the matched text in the completion.
# Type: QtColor
c.colors.completion.match.fg = "#c678dd"

# Color of the scrollbar handle in the completion view.
# Type: QssColor
c.colors.completion.scrollbar.fg = "white"

# Background color for the download bar.
# Type: QssColor
c.colors.downloads.bar.bg = "#282c34"

# Background color for downloads with errors.
# Type: QtColor
c.colors.downloads.error.bg = "#ff6c6b"

# Font color for hints.
# Type: QssColor
c.colors.hints.fg = "#282c34"

# Font color for the matched part of hints.
# Type: QtColor
c.colors.hints.match.fg = "#98be65"

# Background color of an info message.
# Type: QssColor
c.colors.messages.info.bg = "#282c34"

# Background color of the statusbar.
# Type: QssColor
c.colors.statusbar.normal.bg = "#282c34"

# Foreground color of the statusbar in insert mode.
# Type: QssColor
c.colors.statusbar.insert.fg = "white"

# Background color of the statusbar in insert mode.
# Type: QssColor
c.colors.statusbar.insert.bg = "#497920"

# Background color of the statusbar in passthrough mode.
# Type: QssColor
c.colors.statusbar.passthrough.bg = "#34426f"

# Background color of the statusbar in command mode.
# Type: QssColor
c.colors.statusbar.command.bg = "#282c34"

# Foreground color of the URL in the statusbar when there's a warning.
# Type: QssColor
c.colors.statusbar.url.warn.fg = "yellow"

# Background color of the tab bar.
# Type: QssColor
c.colors.tabs.bar.bg = "#1c1f34"

# Background color of unselected odd tabs.
# Type: QtColor
c.colors.tabs.odd.bg = "#282c34"

# Background color of unselected even tabs.
# Type: QtColor
c.colors.tabs.even.bg = "#282c34"

# Background color of selected odd tabs.
# Type: QtColor
c.colors.tabs.selected.odd.bg = "#282c34"

# Background color of selected even tabs.
# Type: QtColor
c.colors.tabs.selected.even.bg = "#282c34"

# Background color of pinned unselected odd tabs.
# Type: QtColor
c.colors.tabs.pinned.odd.bg = "seagreen"

# Background color of pinned unselected even tabs.
# Type: QtColor
c.colors.tabs.pinned.even.bg = "darkseagreen"

# Background color of pinned selected odd tabs.
# Type: QtColor
c.colors.tabs.pinned.selected.odd.bg = "#282c34"

# Background color of pinned selected even tabs.
# Type: QtColor
c.colors.tabs.pinned.selected.even.bg = "#282c34"
#+END_SRC

* Font Configuration
I've had quite a few issues with the fonts for monospace, and so I've come up with a style sheet to utilize the various fonts and colors for elements in GitHub.
This can definitely be altered and you're free to use whichever font is your pick!

#+BEGIN_SRC python
c.content.user_stylesheets = ["~/dotfiles/config/qutebrowser/qute.css"]
c.fonts.default_family = '"SauceCodePro Nerd Font"'
c.fonts.web.family.standard = '"SauceCodePro Nerd Font"'
c.fonts.web.family.serif = '"SauceCodePro Nerd Font"'
c.fonts.web.family.sans_serif = '"SauceCodePro Nerd Font"'
c.fonts.web.family.fixed = '"SauceCodePro Nerd Font"'
#+END_SRC

** Font Utilization
Here is where we define the fonts to use for specific instances.
We mostly set up the variables that use the fonts to do certain functions such as set the default size and determine which font is to be used where.

#+BEGIN_SRC python
c.fonts.default_size = "11pt"

# Font used in the completion widget.
# Type: Font
c.fonts.completion.entry = '11pt "SauceCodePro Nerd Font"'

# Font used for the debugging console.
# Type: Font
c.fonts.debug_console = '11pt "SauceCodePro Nerd Font"'

# Font used for prompts.
# Type: Font
c.fonts.prompts = "default_size sans-serif"

# Font used in the statusbar.
# Type: Font
c.fonts.statusbar = '11pt "SauceCodePro Nerd Font"'
#+END_SRC

* Configuration Bindings
Here is where we alter the commands we have in qutebrowser, quite like an =alias= command.

I've added a few extensions to the bindings as listed below,
- MPV integration to watch YouTube Videos on the MPV player.
- YouTube DL integration for Audio and Video.
- Minor aliases.

#+BEGIN_SRC python
config.bind("M", "hint links spawn mpv {hint-url}")
config.bind("Zv", "hint links spawn alacritty -e youtube-dl {hint-url}")
config.bind("t", "set-cmd-text -s :open -t")
config.bind("xb", "config-cycle statusbar.show always never")
config.bind("xt", "config-cycle tabs.show always never")
config.bind(
    "xx",
    "config-cycle statusbar.show always never;; config-cycle tabs.show always never",
)
config.bind("Za", "hint links spawn alacritty -e youtube-dl --ignore-errors -f bestaudio --extract-audio --audio-format mp3 --audio-quality 0 -o \'~/Music/youtube/%(title)s.%(ext)s\' {hint-url}")
#+END_SRC
